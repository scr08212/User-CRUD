2025-08-27
백엔드 공부 2일차.
어제 김영한님의 '스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술'을 완강했다. 재밌다!
지식이 매우 부족하지만, 바로 다른 강의를 수강하는 것보다는, 일단 한번 구현을 해보면서 내가 뭘 모르는지를 제대로 알려면 뭐든 구현을 한번 해봐야한다고 생각한다.
'회원가입, 로그인, 마이페이지, 정보 수정'이 포함된 간단한 CRUD를 직접 구현해보자!
하지만 단순 구현만으로는 안된다!

비록 아는 지식은 없지만 배운것만 가지고 구현하고 끝낸다? 있을 수 없는 일이다!
하나의 작은 프로젝트를 해도 끝까지 제대로 하자.
지금까지 캐글 대회나가고, 개인 프로젝트 하면서 느낀게 있다.
'이정도면 되겠지~'하고 끝내면 안된다.
보기에 나쁘지 않아보여도, 분명 부족한 부분이 있다.
이번엔 그걸 꽉꽉 채워넣자!

-목표-
단순 CRUD 구현: 3일
수정 및 마무리: 4일
총 7일

구현 리스트
[단순 CRUD]
회원가입
로그인
마이페이지
정보 수정
회원 탈퇴

[추가]
도커 사용해보기
배포 해보기 (AWS)
클린코드!


2025-08-28
기능 구현은 거진 다 끝냈다.
사전지식이 많이 부족하니까 이게 참... 쉽지 않네
현업은 어떻게 구현할까? 보안은 어떻게 처리할까? 이렇게 단순하게 구현해도 될까?
별의별 생각이 다 든다.
일단 돌아가는 쓰레기부터 만들자. 리팩토링은 그 다음에.
완벽에 집착하면 프로젝트가 붕 떠버리니까.
선 구현 후 개선.


2025-08-29
기능 구현은 대충 끝냈다.
하지만 대충으로는 안 된다!
현재 얕은 지식으로 기능 구현에만 급급했기 때문에, 코드 구조, 구현 방식, 보안, 테스트 코드 등 모든 게 부족하다.
1) 코드 구조가 엉망이다!
2) OOP가 엉망이다!
3) 기능도 엉망이다!
4) 보안도 엉망이다!
5) 테스트 코드도 엉망이다!
6) 다 떄려 고치자!

# 일단 지금 로그인/마이페이지 구조부터 손을 봐야겠다. 지금은 HttpSession을 직접 다루고 있는데, 이게 과연 최선일까? 하는 생각이 든다.
Spring Security가 있다는데, 공부하고 적용해봐야겠다.


2025-08-30
할머니 집 감


2025-08-31
본가에서 자취방으로 돌아왔다.
9월 3일 전까지 완성시키자! 못할 시 사형


2025-09-01
Spring security를 적용했다.
기존 HttpSession 잔재를 없애고 바꾸면서 코드가 살짝 복잡해졌다.
내일은 리팩토링, 모레는 API 문서화, 글피는 도커+AWS 배포.
마지막으로 프로젝트 회고 작성 및 문서화를 진행하면서 프로젝트를 끝내자.
배포는 되는지 확인만 해보고 바로 끄자.

# 궁금한것들
Http에러코드는 어떻게 반환하지?
현재는 보안상 취약점이 분명히 존재할텐데 뭐가 있을까?


2025-09-02
TODO: 리팩토링 및 코드정리
1. 로그인
2. 회원가입
3. 마이페이지

------------

뭔가 구조부터 잘못된듯 싶은데...
다른사람 코드를 많이 봐야할듯

후 생각보다 고칠게 많다
서비스/컨트롤러 책임을 명확히 하는 게 생각보다 어렵다.
프론트단은 gemini한테 전권을 위임했다. 보면서 좀 익혀야할듯
하면서 느끼는건데, 테스트 코드를 먼저 작성하는게 확실히 나아보인다. 선구현 후 테스트는 좀 그렇네.


2025-09-03
TODO: API 문서화

자잘한 일을 끝냈다. Swagger을 통해 API 문서화를 해야겠다.

#########

Swagger를 통해 api 문서화를 진행하려고 보니
지금 내 코드가 얼마나 엉망인지 알았다!

REST API 라는 개념을 알았다.
Controller는 ResponseEntity를 통해 반환해야한다.
URL은 동사가 아닌 명사중심으로 해야한다.
등등등

굉장히 많은 것들이 존재한다.
신난다~

문제는 지금 해둔걸 다 때려부수고 다시 설계해야하냐는건데,
그냥 게시판 CRUD 만들때 할까?

2025-09-04
TODO: 도커, AWS 배포
에잇!
생각해보자
이 프로젝트의 학습 목표가 무엇인가?
간단한 CRUD 개발 및 배포 경험이 아니었던가?
지금와서 RESTFUL하게 만드는건 너무 대공사일 뿐더러 기존 취지와 맞지 않다. 과한 진도이기도 하고.
이정도로 프로젝트를 일단락하고, 배포해보자.

도커와 AWS EC2 배포 경험 완료!

윈도우에서 만들었던 Spring Boot User CRUD 이미지를 EC2에 올려서 컨테이너로 실행했다.
처음에는 포트 문제 때문에 외부 접속이 안 돼서 좀 해맸다.
호스트 포트와 컨테이너 포트를 제대로 매핑하고, 보안 그룹에서 8080 포트를 열어주니 브라우저에서 정상적으로 접속됐다.
윈도우에서 바로 되는 게, EC2에서는 네트워크/포트 설정 때문에 또 다르게 느껴진다.
그렇지만 직접 올려보고 외부에서 접속까지 해보니 재밌다!


---------------- 회고 ----------------

## 이번 프로젝트에서 아쉬웠던 점들
1. 김영한님 무료 강의만 듣고 맨땅에 헤딩식으로 시작해서 그런지, 여러모로 많이 부족했다.
2. REST API가 뭔지도 잘 모르고 프로젝트를 진행해서, API 구조가 엉망이었다.
3. 아는 게 적어서 구현하는 것만으로도 벅찼고, 클린코드는 거의 신경쓰지 못했다.
4. 컨트롤러와 서비스 책임을 명확히 분리하지 못했다.
5. 테스트 코드를 거의 작성하지 않았다. CI/CD를 염두에 두면 자연스럽게 테스트 코드도 작성하게 될 듯.
6. UserController를 너무 쪼갠 것 같다. 최소 CRUD 범위는 하나로 충분했는데, SignUp, Login, Logout 등을 과하게 나눔.
7. 일정이 좀 오버됐다. 처음 프로젝트 진행 시, 명확한 요구 명세서를 작성하지 않아 방향이 흐려졌다. 다음엔 꼭 명세서 먼저!
8. Git commit을 체계적으로 하지 못했다.


## 이번 프로젝트에서 좋았던 점들
1. 맨땅에 헤딩식으로 구현하니, 강의 내용뿐만 아니라 여러 상황을 몸으로 체득할 수 있었다.
2. AWS EC2에 직접 올리고 외부에서 접속까지 해보면서, 배포 과정과 네트워크 문제를 몸으로 익혔다. 재밌었다.


## 다음 프로젝트시 고려할 것들
0. 이번 프로젝트에서 아쉬웠던 모든 것들
1. RESTFUL하게 설계
2. CI/CD 적용
3. 필요한 새로운 기술 최소 한 가지 사용 (Redis, Kafka, JWT 등)
이번 경험을 바탕으로 다음에는 조금 더 계획적이고, 깔끔하게 구현할 수 있을 듯.
맨땅에 헤딩도 재밌지만, 조금씩 체계도 잡아가자.

## 다음에는?
1. 김영한님 MVC 강의 1강 수강 (3일)
2. 김영한님 jpa 강의 1강 수강 (1일)
3. 게시판 CRUD 개발 (3일)
4. 오픈소스 LLM(LLaMA 등)을 활용한 뉴스 요약 + RAG 기반 Q&A 챗봇 웹 서비스 프로젝트 시작(4주)
